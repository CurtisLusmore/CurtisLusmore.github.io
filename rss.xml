<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
  <channel>
    <title>lusmo.re</title>
    <link>https://lusmo.re</link>
    <description>Curtis’ homepage</description>
    <item>
      <title>Impostor Syndrome</title>
      <link>https://lusmo.re/posts/impostor-syndrome</link>
      <guid>https://lusmo.re/posts/impostor-syndrome</guid>
      <description>
        <p>
          What do a junior and a senior developer have in common? They both
          constantly feel like they have absolutely no idea what they’re doing.
          What’s the difference between a junior and a senior developer? The
          senior developer knows that this is completely normal. One of the
          things about programming is that if you’re doing something you’ve
          done before, you’re usually doing it wrong. And by this I mean that
          if you’re trying to solve a problem you’ve solved before, you should
          just reuse the solution from last time.
        </p>
        <p>
          We’re lucky in the world of software that we can do this, but one of
          the consequences of this is that most software development is almost
          by definition something that has never been done before, at least by
          you. If you work in software, you’d better get used to this feeling.
          It’s easy to look at all the people around you at work or in the
          community and the great work that they do and think they must know
          what they’re doing. “These people are real developers, I’m just an
          impostor. One day they’ll all realise I am completely out of my depth
          and I’ll be fired.” This feeling is so common that it has a
          name—<a target="_blank"
          href="https://en.wikipedia.org/wiki/Impostor_syndrome">impostor
          syndrome</a>.
        </p>
      </description>
      <pubDate>Thu, 7 March 2019 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Computer Science as Exploration</title>
      <link>https://lusmo.re/posts/computer-science-as-exploration</link>
      <guid>https://lusmo.re/posts/computer-science-as-exploration</guid>
      <description>
        <p>
          What is computer science really about? In the present day, despite
          being such a relatively young and immature field, computer science
          employs millions of people all over the world, it produces the
          technologies that run our lives, and it is responsible for countless
          billions or trillions of dollars of value. Even going into the
          near-term future, the software that has been built over the last few
          decades will continue to affect the daily lives of people for
          generations to come.
        </p>
        <p>
          But to me, that’s just commercial success. At the end of the day, or
          perhaps better to say at the end of the millenium, will anybody
          really care? If we made contact with an alien race, would we brag
          about our ability to share cat photos with millions of strangers, or
          even our ability to build billion dollar companies? There must be
          some deeper meaning to this all. I can feel it. When I’m programming
          or problem solving, I feel like I’m exploring. But what am I
          exploring?
        </p>
      </description>
      <pubDate>Sun, 24 February 2019 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Accidental Agility</title>
      <link>https://lusmo.re/posts/accidental-agility</link>
      <guid>https://lusmo.re/posts/accidental-agility</guid>
      <description>
        <p>
          Today marks the 18th anniversary of the final day of the meeting at
          Snowbird which ultimately lead to the creation of the
          <a target="_blank" href="https://agilemanifesto.org/">agile software
          development manifesto</a>. If it were a person, it’d be at the legal
          drinking age (here in Australia). And it has a lot to celebrate, it’s
          come a long way in that time. What started as scribblings on a
          blackboard in a meeting of seventeen programmers has since grown to
          take the business world by storm. Some would even say it’s grown out
          of control <a target="_blank" href="https://www.youtube.com/watch?v=a-BOSpxYJ9M"
          >(some of the original authors, no less)</a>.
        </p>
        <p>
          In this post, I want to rediscover the essence of agility by looking
          at an example of an industry that exhibits the principles outlined in
          the original manifesto, despite not even being aware of it. This
          essentially means that they have independently discovered the ideas
          of agile development, but because they missed the surrounding hype,
          they’ve managed to avoid a lot of the unnecessary baggage that tends
          to follow “Agile” in practice. My goal is to make people refocus on
          what is really important and valuable about agile software
          development, and see past the noise that has built up around it.
        </p>
      </description>
      <pubDate>Wed, 13 February 2019 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Find a Purpose: My Journey, Part 2</title>
      <link>https://lusmo.re/posts/find-a-purpose</link>
      <guid>https://lusmo.re/posts/find-a-purpose</guid>
      <description>
        <p>
          I continued building tiny, incomplete games with Game Maker for a
          couple of years, never really making anything substantial but still
          learning a lot. And while I was enjoying the act of making games, and
          I certainly enjoyed playing games, I didn’t really enjoy playing my
          games. Partly because they weren’t very good, but also because I knew
          how they worked, how to beat them, and I didn’t get the same feeling
          of discovery that I got playing other games. And as the enjoyment of
          playing the games diminished, so too did the enjoyment of making
          them. I wasn’t sure whether I should be programming for the sake of
          programming, or programming for the outcome.
        </p>
        <p>
          At the same time, I was spending a great deal of time playing an
          online game, which will remain nameless. The client for playing this
          game had an IRC chat window below the main game window, which I would
          use to chat with my friends while playing. One of my friends was also
          a programmer, and he knew how to make IRC bots. If I recall
          correctly, his bot simply helped administer the channel—it would
          grant certain users permissions when they joined, kick people out
          when they broke the rules, it could even run a little trivia game. It
          didn’t do anything terribly exciting, but I could see the potential.
        </p>
      </description>
      <pubDate>Wed, 6 February 2019 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>The First Great Epiphany: My Journey, Part 1</title>
      <link>https://lusmo.re/posts/the-first-great-epiphany</link>
      <guid>https://lusmo.re/posts/the-first-great-epiphany</guid>
      <description>
        <p>
          My first exposure to programming was some time around the turn of the
          century with a program called Game Maker, which as the name suggests,
          was built for making games. Game Maker actually supported a decent
          amount of graphical programming by dragging-and-dropping icons around
          the screen to describe the behaviour of different objects in the
          game, but as soon as I learnt that there was another way to do it
          that had more features, I wanted to learn that.
        </p>
        <p>
          The tutorial for the scripting language in Game Maker at the time
          walked you through programming a little game similar to Space
          Invaders, where you controlled a space ship at the bottom of the
          screen and the goal was to shoot the enemy ships approaching from the
          top of the screen. I followed the instructions closely, typing in all
          the code it supplied to define the behaviour for moving and shooting,
          including a cooldown for the gun so that you wouldn’t just fire off
          a shot every game tick. And then they gave you an exercise, to add a
          second weapon to the ship that was triggered from a separate key and
          that had its own cooldown. And I was stumped.
        </p>
      </description>
      <pubDate>Sun, 3 February 2019 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Multiple Git Profiles</title>
      <link>https://lusmo.re/posts/multiple-git-profiles</link>
      <guid>https://lusmo.re/posts/multiple-git-profiles</guid>
      <description>
        <p>
          If like me, you need to make Git commits from multiple email
          addresses on the same machine (say, from your personal and your work
          address), here’s a handy trick that will help make sure you make
          every commit with the right address.
        </p>
        <p>
          Start by creating a directory for each profile, named after the
          profile. In my case, I have <code>D:/git/home</code> and
          <code>D:/git/work</code>. Move all your Git repositories into
          the directory corresponding to the profile that you want to use when
          making commits to that repository. At the root of your profile
          directories, create a <code>.gitconfig</code> file with the following
          content.
        </p>
      </description>
      <pubDate>Thu, 31 January 2019 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Programming by Wishful Thinking</title>
      <link>https://lusmo.re/posts/programming-by-wishful-thinking</link>
      <guid>https://lusmo.re/posts/programming-by-wishful-thinking</guid>
      <description>
        <p>
          This is a technique that I discovered several years ago while
          teaching an introductory programming course, and I was extremely
          pleased to find out that although it had already been discovered, I
          had given it the same name. <a target="_blank"
          href="http://dsoguy.blogspot.com/2007/01/programming-by-wishful-thinking.html"
          >Programming by wishful thinking</a> is a style of top-down
          program design that helps you improve the structure of your code,
          isolate the hairy parts from the simple parts, think more clearly
          about data flow, and work faster. I find it particularly helpful for
          novice programmers who feel intimidated when starting a new project
          and aren’t sure how to get started, but I still practise it regularly
          as well.
        </p>
      </description>
      <pubDate>Mon, 21 January 2019 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Diagnostics Anonymous</title>
      <link>https://lusmo.re/posts/diagnostics-anonymous</link>
      <guid>https://lusmo.re/posts/diagnostics-anonymous</guid>
      <description>
        <p>
          When working with large systems, especially with software, inevitably
          something will go wrong and you’ll be stuck trying to diagnose it.
          My years of developing software have given me a lot of practice
          diagnosing errors or unintended behaviour in software systems
          (usually in my own code), and over time I’ve built up a systematic
          process that I run through to speed up the process. In writing this
          post, I came to realise that my process actually has quite a lot in
          common with 12-step programs, so I’ve tweaked the format a little to
          make the content a little more interesting.
        </p>
      </description>
      <pubDate>Mon, 4 December 2017 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Imitating Classes</title>
      <link>https://lusmo.re/posts/imitating-classes</link>
      <guid>https://lusmo.re/posts/imitating-classes</guid>
      <description>
        <p>
          In this post, we are going to explore how you might imitate classes
          in a language that doesn’t have them, to get a better feel for how
          various object-oriented language features actually work. We will use
          JavaScript, but ban ourselves from using
        </p>
        <ul>
          <li>the class keyword (obviously),</li>
          <li>the new keyword (we will construct all of our own objects),</li>
          <li>the this keyword,</li>
          <li>prototypal inheritance (we will build our own inheritance
            mechanism).</li>
        </ul>
      </description>
      <pubDate>Mon, 13 November 2017 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>The Freedom of Restrictions</title>
      <link>https://lusmo.re/posts/the-freedom-of-restrictions</link>
      <guid>https://lusmo.re/posts/the-freedom-of-restrictions</guid>
      <description>
        <p>
          One of my great joys when designing things is when I discover that I
          can lift a restriction and make something both simpler and more
          powerful at the same time. This can happen at all levels, from
          something like changing a function signature to make it more generic,
          right up to unifying high level system components. The more generic
          something is, the more situations you can use it in, and the more
          value it can provide.
        </p>
      </description>
      <pubDate>Mon, 26 December 2016 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>What’s in a Language?</title>
      <link>https://lusmo.re/posts/whats-in-a-language</link>
      <guid>https://lusmo.re/posts/whats-in-a-language</guid>
      <description>
        <h2>What’s the purpose of a programming language?</h2>
        <p>
          A programming language is an interface between humans and computers,
          that allows us to program computers to perform some task. The purpose
          of the task is usually to solve some particular problem that the
          human has. Most languages are <a target="_blank"
          href="https://en.wikipedia.org/wiki/Turing_completeness">Turing
          complete</a>, which essentially means that they are mostly all
          equivalent. So what’s the point of creating a new programming
          language if it’s equivalent to ones that already exist? Turing
          completeness means that languages are equivalent in terms of the
          programs they are able to express, but it says nothing about the
          journey of getting to the finished program.
        </p>
      </description>
      <pubDate>Tue, 6 September 2016 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>What’s in a Language?</title>
      <link>https://lusmo.re/posts/whats-in-a-language</link>
      <guid>https://lusmo.re/posts/whats-in-a-language</guid>
      <description>
        <h2>What’s the purpose of a programming language?</h2>
        <p>
          A programming language is an interface between humans and computers,
          that allows us to program computers to perform some task. The purpose
          of the task is usually to solve some particular problem that the
          human has. Most languages are <a target="_blank"
          href="https://en.wikipedia.org/wiki/Turing_completeness">Turing
          complete</a>, which essentially means that they are mostly all
          equivalent. So what’s the point of creating a new programming
          language if it’s equivalent to ones that already exist? Turing
          completeness means that languages are equivalent in terms of the
          programs they are able to express, but it says nothing about the
          journey of getting to the finished program.
        </p>
      </description>
      <pubDate>Tue, 6 September 2016 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>199 Days of Git: Reflections on Git streaking</title>
      <link>https://lusmo.re/posts/199-days-of-git</link>
      <guid>https://lusmo.re/posts/199-days-of-git</guid>
      <description>
        <p>
          May 20, 2016. My Git streak comes to an abrupt end on 199 days.
          Today, GitHub disabled the commit streak feature and left me stranded
          one day short of a milestone. It feels a little frustrating to get so
          close and then have it taken away, but in the end the overwhelming
          feeling is actually one of relief.
        </p>
        <p>
          I’m a chronic procrastinator and a prolific sidetracker—I’ve always
          had trouble following through on things after the initial whirl of
          enthusiastic development dies down. More often than not, it’s not so
          much that I get bored of the project I’m working, it’s that I get
          distracted by something else more exciting. I’ve tried lots of
          different approaches to improve this, but haven’t had much success.
        </p>
      </description>
      <pubDate>Fri, 20 May 2016 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Trust Nobody, Not Even Yourself</title>
      <link>https://lusmo.re/posts/trust-nobody-not-even-yourself</link>
      <guid>https://lusmo.re/posts/trust-nobody-not-even-yourself</guid>
      <description>
        <blockquote>
          <p>
            Trust the programmer
          </p>
        </blockquote>
        <p>
          This phrase is part of the C philosophy, and has influenced the
          design of many programming languages. In general C usage, this is
          best observed by the use of pointer casts—a mechanism by which the
          programmer can bypass the type system, trading compile-time type
          safety for flexibility and potentially incurring fatal crashes at
          run-time. The phrase needs little explanation—the programmer knows
          what they’re doing, don’t get in their way.
        </p>
      </description>
      <pubDate>Sat, 7 May 2016 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Why Static Isn’t Real Sharing</title>
      <link>https://lusmo.re/posts/why-static-isnt-real-sharing</link>
      <guid>https://lusmo.re/posts/why-static-isnt-real-sharing</guid>
      <description>
        <p>
          The static keyword has origins as far back as C, and has carried
          across to C++, Java and C#, among others—although its meaning has
          changed a bit along the way. In C# and Java, one of the common uses
          is for class-level sharing of members. Static members don’t belong to
          any instance, and can only be accessed directly from the class or
          from another definition in the same class.
        </p>
        <p>
          And this is all well and good for sharing within a class, but the
          problem is that it doesn’t play well with inheritance, because static
          members cannot be overridden. And inheritance is another common
          method of achieving code sharing. Consider the following snippet,
          which shows how one might hope to override static members in C#.
        </p>
      </description>
      <pubDate>Fri, 8 April 2016 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Intuition of Church Encoding</title>
      <link>https://lusmo.re/posts/intuition-of-church-encoding</link>
      <guid>https://lusmo.re/posts/intuition-of-church-encoding</guid>
      <description>
        <p>
          After first being introduced to the concept of Church numerals in
          <a target="_blank" href="https://mitpress.mit.edu/sicp/">Structure
          and Interpretation of Computer Programs</a>, I decided to learn more
          about them and the more general topic, <a target="_blank"
          href="https://en.wikipedia.org/wiki/Church_encoding">Church
          encoding</a>. For those who don’t know, Church encoding defines a way
          to represent common data types and structures in the
          <a target="_blank"
          href="https://en.wikipedia.org/wiki/Lambda_calculus">Lambda
          calculus</a> using only functions, since functions are the only terms
          available.
        </p>
        <p>
          I eventually stumbled upon a pretty neat intuition for how Church
          encodings work, which enables you to create encodings for arbitrary
          data types very easily. But first, a little on how I got there…
        </p>
      </description>
      <pubDate>Sat, 26 March 2016 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Pre-processing Imports in Python</title>
      <link>https://lusmo.re/posts/pre-processing-imports-in-python</link>
      <guid>https://lusmo.re/posts/pre-processing-imports-in-python</guid>
      <description>
        <p>
          Inspired by <a target="_blank"
          href="https://www.youtube.com/watch?v=0oTh1CXRaQ0">David Beazley’s
          talk</a> on various hacks that can be made to Python’s import system,
          I whipped up the following script for running a preprocessor over a
          file at import-time. In most cases, I would say this is far from a
          good idea, but it might be useful for creating small domain-specific
          languages, or defining new literals, or something like that.
        </p>
      </description>
      <pubDate>Mon, 27 July 2015 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Multiple Dispatch in Python</title>
      <link>https://lusmo.re/posts/multiple-dispatch-in-python</link>
      <guid>https://lusmo.re/posts/multiple-dispatch-in-python</guid>
      <description>
        <p>
          I recently read <a target="_blank"
          href="https://www.oreilly.com/programming/free/files/functional-programming-python.pdf"
          >Functional Programming in Python</a> which mentions a library which
          adds multiple dispatch to Python. One of my biggest hobbies is
          creating things from scratch, as it really helps me get a better
          understanding of how they work, so I thought I’d see if I couldn’t
          figure out how to do it myself.
        </p>
      </description>
      <pubDate>Sat, 25 July 2015 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Programming Languages for Beginners</title>
      <link>https://lusmo.re/posts/programming-languages-for-beginners</link>
      <guid>https://lusmo.re/posts/programming-languages-for-beginners</guid>
      <description>
        <p>
          What’s the best/easiest programming language to learn for a beginner?
          I see this question asked all the time. Usually asked by people who
          want to get into programming, or maybe they’ve just finished learning
          the basics in their first language and are thinking about where to go
          next. It’s an innocent enough question and usually asked with good
          intentions, but it still bugs me every time I see it.
        </p>
      </description>
      <pubDate>Sat, 6 December 2014 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss> 